{"$message_type":"diagnostic","message":"cannot transmute between types of different sizes, or dependently-sized types","code":{"code":"E0512","explanation":"Transmute with two differently sized types was attempted.\n\nErroneous code example:\n\n```compile_fail,E0512\nfn takes_u8(_: u8) {}\n\nfn main() {\n    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n    // error: cannot transmute between types of different sizes,\n    //        or dependently-sized types\n}\n```\n\nPlease use types with same size or use the expected type directly. Example:\n\n```\nfn takes_u8(_: u8) {}\n\nfn main() {\n    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n    // or:\n    unsafe { takes_u8(0u8); } // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\User\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\static_assertions-1.1.0\\src\\assert_eq_size.rs","byte_start":1285,"byte_end":1325,"line_start":37,"line_end":37,"column_start":23,"column_end":63,"is_primary":true,"text":[{"text":"            $(let _ = $crate::_core::mem::transmute::<$x, $xs>;)+","highlight_start":23,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\User\\.cargo\\git\\checkouts\\substrate-7e08433d4c370a21\\948fbd2\\primitives\\runtime-interface\\src\\impls.rs","byte_start":1462,"byte_end":1489,"line_start":45,"line_end":45,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"assert_eq_size!(usize, u32);","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq_size!","def_site_span":{"file_name":"C:\\Users\\User\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\static_assertions-1.1.0\\src\\assert_eq_size.rs","byte_start":1168,"byte_end":1195,"line_start":34,"line_end":34,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! assert_eq_size {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"source type: `usize` (64 bits)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"target type: `u32` (32 bits)","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0512]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot transmute between types of different sizes, or dependently-sized types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\User\\.cargo\\git\\checkouts\\substrate-7e08433d4c370a21\\948fbd2\\primitives\\runtime-interface\\src\\impls.rs:45:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0massert_eq_size!(usize, u32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: source type: `usize` (64 bits)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: target type: `u32` (32 bits)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq_size` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot transmute between types of different sizes, or dependently-sized types","code":{"code":"E0512","explanation":"Transmute with two differently sized types was attempted.\n\nErroneous code example:\n\n```compile_fail,E0512\nfn takes_u8(_: u8) {}\n\nfn main() {\n    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n    // error: cannot transmute between types of different sizes,\n    //        or dependently-sized types\n}\n```\n\nPlease use types with same size or use the expected type directly. Example:\n\n```\nfn takes_u8(_: u8) {}\n\nfn main() {\n    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n    // or:\n    unsafe { takes_u8(0u8); } // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\User\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\static_assertions-1.1.0\\src\\assert_eq_size.rs","byte_start":1285,"byte_end":1325,"line_start":37,"line_end":37,"column_start":23,"column_end":63,"is_primary":true,"text":[{"text":"            $(let _ = $crate::_core::mem::transmute::<$x, $xs>;)+","highlight_start":23,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\User\\.cargo\\git\\checkouts\\substrate-7e08433d4c370a21\\948fbd2\\primitives\\runtime-interface\\src\\impls.rs","byte_start":1576,"byte_end":1607,"line_start":47,"line_end":47,"column_start":1,"column_end":32,"is_primary":false,"text":[{"text":"assert_eq_size!(*const u8, u32);","highlight_start":1,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq_size!","def_site_span":{"file_name":"C:\\Users\\User\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\static_assertions-1.1.0\\src\\assert_eq_size.rs","byte_start":1168,"byte_end":1195,"line_start":34,"line_end":34,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! assert_eq_size {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"source type: `*const u8` (64 bits)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"target type: `u32` (32 bits)","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0512]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot transmute between types of different sizes, or dependently-sized types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\User\\.cargo\\git\\checkouts\\substrate-7e08433d4c370a21\\948fbd2\\primitives\\runtime-interface\\src\\impls.rs:47:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0massert_eq_size!(*const u8, u32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: source type: `*const u8` (64 bits)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: target type: `u32` (32 bits)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq_size` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0512`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0512`.\u001b[0m\n"}
